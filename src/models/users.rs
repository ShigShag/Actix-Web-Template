use diesel::prelude::*;
use serde::{Deserialize, Serialize};

use crate::schema::users;
use crate::utils::argon2::hash_password;

// This corresponds to a row in your `users_table`.
#[derive(Queryable, Serialize, Deserialize, Debug, Identifiable)]
#[diesel(table_name = users)]
pub struct User {
    pub id: i32,
    pub email: String,
    pub hashed_password: String,
}

// Since id is autogenerated by db we do not need to insert it
#[derive(Insertable)]
#[diesel(table_name = users)]
pub struct NewUser {
    pub email: String,
    pub hashed_password: String,
}

impl NewUser {
    pub fn new(email: &String, password: &String) -> Result<NewUser, argon2::password_hash::Error> {
        // Create hash of password
        let password_hash = hash_password(password)?;

        Ok(NewUser {
            email: email.clone(),
            hashed_password: password_hash.to_string(),
        })
    }
}
